import os

Nb = 4  # 列数
Nk = 4  # 密钥长度
Nr = 10  # 轮数


S_BOX = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]

INV_S_BOX = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
]

RCON = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]


def pad(data):
    """PKCS#7填充（修复版）"""
    pad_len = 16 - (len(data) % 16)
    if pad_len == 0:
        pad_len = 16
    return data + bytes([pad_len] * pad_len)

def unpad(data):
    """去除PKCS#7填充（修复版）"""
    if not data:
        return data
    pad_len = data[-1]
    if pad_len < 1 or pad_len > 16 or data[-pad_len:] != bytes([pad_len]*pad_len):
        raise ValueError("Invalid padding")
    return data[:-pad_len]

def xor_bytes(a, b):
    return bytes(x^y for x,y in zip(a,b))

def rot_word(word):
    """循环左移1字节"""
    return word[1:] + word[:1]

def sub_word(word):
    """使用S盒替换每个字节"""
    return bytes(S_BOX[b] for b in word)

def key_expansion(key):
    round_keys = [key[i*4:(i+1)*4] for i in range(Nk)]  # 初始4个word
    
    for i in range(Nk, 4*(Nr+1)):
        temp = round_keys[i-1]
        if i % Nk == 0:
            rotated = rot_word(temp)
            substituted = sub_word(rotated)
            rcon = bytes([RCON[i//Nk-1]] + [0,0,0])
            temp = xor_bytes(substituted, rcon)
        elif Nk > 6 and i % Nk == 4:
            temp = sub_word(temp)
        new_word = xor_bytes(round_keys[i-Nk], temp)
        round_keys.append(new_word)
    

    return [b''.join(round_keys[i:i+4]) for i in range(0, len(round_keys), 4)]

def sub_bytes(state):
    return bytes(S_BOX[b] for b in state)

def inv_sub_bytes(state):
    return bytes(INV_S_BOX[b] for b in state)

def shift_rows(state):
    state = bytearray(state)
    # 第二行循环左移1字节
    state[1], state[5], state[9], state[13] = state[5], state[9], state[13], state[1]
    # 第三行循环左移2字节
    state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]
    # 第四行循环左移3字节
    state[3], state[7], state[11], state[15] = state[15], state[3], state[7], state[11]
    return bytes(state)

def inv_shift_rows(state):
    state = bytearray(state)
    # 第二行循环右移1字节
    state[1], state[5], state[9], state[13] = state[13], state[1], state[5], state[9]
    # 第三行循环右移2字节
    state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]
    # 第四行循环右移3字节
    state[3], state[7], state[11], state[15] = state[7], state[11], state[15], state[3]
    return bytes(state)

def gf_mult(a, b):
    p = 0
    a = a % 256
    b = b % 256
    for _ in range(8):
        if b & 1:
            p ^= a
        carry = a & 0x80
        a = (a << 1) & 0xFF
        if carry:
            a ^= 0x1B
        b >>= 1
    return p

def mix_columns(state):
    new_state = []
    for col in range(4):
        start = col * 4
        s0 = gf_mult(0x02, state[start]) ^ gf_mult(0x03, state[start+1]) ^ state[start+2] ^ state[start+3]
        s1 = state[start] ^ gf_mult(0x02, state[start+1]) ^ gf_mult(0x03, state[start+2]) ^ state[start+3]
        s2 = state[start] ^ state[start+1] ^ gf_mult(0x02, state[start+2]) ^ gf_mult(0x03, state[start+3])
        s3 = gf_mult(0x03, state[start]) ^ state[start+1] ^ state[start+2] ^ gf_mult(0x02, state[start+3])
        new_state.extend([s0, s1, s2, s3])
    return bytes(new_state)


def inv_mix_columns(state):
    new_state = []
    for i in range(4):
        col = state[i*4:(i+1)*4]
        s0 = gf_mult(0x0e, col[0]) ^ gf_mult(0x0b, col[1]) ^ gf_mult(0x0d, col[2]) ^ gf_mult(0x09, col[3])
        s1 = gf_mult(0x09, col[0]) ^ gf_mult(0x0e, col[1]) ^ gf_mult(0x0b, col[2]) ^ gf_mult(0x0d, col[3])
        s2 = gf_mult(0x0d, col[0]) ^ gf_mult(0x09, col[1]) ^ gf_mult(0x0e, col[2]) ^ gf_mult(0x0b, col[3])
        s3 = gf_mult(0x0b, col[0]) ^ gf_mult(0x0d, col[1]) ^ gf_mult(0x09, col[2]) ^ gf_mult(0x0e, col[3])
        new_state.extend([s0, s1, s2, s3])
    return bytes(new_state)

# ------------------- 块加密/解密 -------------------
def aes_encrypt_block(block, round_keys):
    state = block
    state = xor_bytes(state, round_keys[0])
    
    for i in range(1, Nr):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = xor_bytes(state, round_keys[i])
    
    state = sub_bytes(state)
    state = shift_rows(state)
    return xor_bytes(state, round_keys[-1])

def aes_decrypt_block(block, round_keys):
    state = block
    state = xor_bytes(state, round_keys[-1])
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)
    
    for i in range(Nr-1, 0, -1):
        state = xor_bytes(state, round_keys[i])
        state = inv_mix_columns(state)
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)
    
    return xor_bytes(state, round_keys[0])

# ------------------- CBC模式 -------------------
def cbc_encrypt(plaintext, key, iv):
    round_keys = key_expansion(key)
    padded = pad(plaintext)
    blocks = [padded[i:i+16] for i in range(0, len(padded), 16)]
    ciphertext = b''
    prev = iv
    
 
    print(f"填充后数据长度: {len(padded)} 字节")
    print(f"分割块数: {len(blocks)}")
    
    for idx, block in enumerate(blocks):
        print(f"\n加密块 {idx+1}:")
        print("原始块:", block.hex())
        xored = xor_bytes(block, prev)
        print("异或结果:", xored.hex())
        
        encrypted = aes_encrypt_block(xored, round_keys)
        print("加密结果:", encrypted.hex())
        
        ciphertext += encrypted
        prev = encrypted
    
    return ciphertext


def cbc_decrypt(ciphertext, key, iv):
    round_keys = key_expansion(key)
    blocks = [ciphertext[i:i+16] for i in range(0, len(ciphertext), 16)]
    plaintext = b''
    prev = iv
    
    for block in blocks:
        decrypted = aes_decrypt_block(block, round_keys)
        plaintext += xor_bytes(decrypted, prev)
        prev = block
    
    return unpad(plaintext)

def test_official_vector():
    # NIST测试向量（包含完整填充）
    key = bytes.fromhex("2b7e151628aed2a6abf7158809cf4f3c")
    iv = bytes.fromhex("000102030405060708090a0b0c0d0e0f")
    plaintext = bytes.fromhex("6bc1bee22e409f96e93d7e117393172a")
    

    expected = bytes.fromhex("7649abac8119b246cee98e9b12e9197d8964e0b149c10b7b686e39aaeb731c")
    

    ciphertext = cbc_encrypt(plaintext, key, iv)
    print("加密结果:", ciphertext.hex())
    print("期望结果:", expected.hex())
    print("加密验证:", ciphertext == expected)
    

    decrypted = cbc_decrypt(ciphertext, key, iv)
    print("解密结果:", decrypted.hex())
    print("原始明文:", plaintext.hex())
    print("解密验证:", decrypted == plaintext)

test_official_vector()

